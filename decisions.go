// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
	time "time"
)

type DecisionsQueryRequest struct {
	// The slug of the rule to query logs for.
	Slug string `json:"-" url:"slug"`
	// Start date for the query range (ISO8601 format).
	From *time.Time `json:"-" url:"from,omitempty"`
	// End date for the query range (ISO8601 format).
	To *time.Time `json:"-" url:"to,omitempty"`
	// Cursor for pagination.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Number of results to return per page.
	Limit *int `json:"-" url:"limit,omitempty"`
}

// Rule/flow execution log entry. Explore this object's schema from your Rulebricks dashboard in the Logs tab.
type DecisionLog = map[string]interface{}

type DecisionLogResponse struct {
	Data []DecisionLog `json:"data,omitempty" url:"data,omitempty"`
	// Pagination cursor for next page
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DecisionLogResponse) GetData() []DecisionLog {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DecisionLogResponse) GetCursor() *string {
	if d == nil {
		return nil
	}
	return d.Cursor
}

func (d *DecisionLogResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DecisionLogResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DecisionLogResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DecisionLogResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DecisionLogResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
