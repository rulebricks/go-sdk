// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type UsageStatistics struct {
	// The current plan of the organization.
	Plan *string `json:"plan,omitempty" url:"plan,omitempty"`
	// The start date of the current monthly period.
	MonthlyPeriodStart *string `json:"monthly_period_start,omitempty" url:"monthly_period_start,omitempty"`
	// The end date of the current monthly period.
	MonthlyPeriodEnd *string `json:"monthly_period_end,omitempty" url:"monthly_period_end,omitempty"`
	// The number of rule executions used this month.
	MonthlyExecutionsUsage *float64 `json:"monthly_executions_usage,omitempty" url:"monthly_executions_usage,omitempty"`
	// The total number of rule executions allowed this month.
	MonthlyExecutionsLimit *float64 `json:"monthly_executions_limit,omitempty" url:"monthly_executions_limit,omitempty"`
	// The number of rule executions remaining this month.
	MonthlyExecutionsRemaining *float64 `json:"monthly_executions_remaining,omitempty" url:"monthly_executions_remaining,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UsageStatistics) GetPlan() *string {
	if u == nil {
		return nil
	}
	return u.Plan
}

func (u *UsageStatistics) GetMonthlyPeriodStart() *string {
	if u == nil {
		return nil
	}
	return u.MonthlyPeriodStart
}

func (u *UsageStatistics) GetMonthlyPeriodEnd() *string {
	if u == nil {
		return nil
	}
	return u.MonthlyPeriodEnd
}

func (u *UsageStatistics) GetMonthlyExecutionsUsage() *float64 {
	if u == nil {
		return nil
	}
	return u.MonthlyExecutionsUsage
}

func (u *UsageStatistics) GetMonthlyExecutionsLimit() *float64 {
	if u == nil {
		return nil
	}
	return u.MonthlyExecutionsLimit
}

func (u *UsageStatistics) GetMonthlyExecutionsRemaining() *float64 {
	if u == nil {
		return nil
	}
	return u.MonthlyExecutionsRemaining
}

func (u *UsageStatistics) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UsageStatistics) UnmarshalJSON(data []byte) error {
	type unmarshaler UsageStatistics
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsageStatistics(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsageStatistics) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
