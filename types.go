// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type BadRequestErrorBody struct {
	// Error message describing the issue with the request.
	Error *string `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BadRequestErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler BadRequestErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BadRequestErrorBody(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BadRequestErrorBody) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type ForbiddenErrorBody struct {
	Error *string `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (f *ForbiddenErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ForbiddenErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = ForbiddenErrorBody(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *ForbiddenErrorBody) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type InternalServerErrorBody struct {
	// Error message describing the internal server error.
	Error *string `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (i *InternalServerErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler InternalServerErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InternalServerErrorBody(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InternalServerErrorBody) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type NotFoundErrorBody struct {
	// Error message indicating the value was not found.
	Error *string `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NotFoundErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NotFoundErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotFoundErrorBody(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotFoundErrorBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}
