// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type ListResponseItem struct {
	// The unique identifier for the rule.
	Id *string `json:"id,omitempty"`
	// The name of the rule.
	Name *string `json:"name,omitempty"`
	// The description of the rule.
	Description *string `json:"description,omitempty"`
	// The creation date of the rule.
	CreatedAt *string `json:"created_at,omitempty"`
	// The unique slug for the rule used in API requests.
	Slug           *string                               `json:"slug,omitempty"`
	RequestSchema  []*ListResponseItemRequestSchemaItem  `json:"request_schema,omitempty"`
	ResponseSchema []*ListResponseItemResponseSchemaItem `json:"response_schema,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListResponseItem(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListResponseItem) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UsageResponse struct {
	// The current plan of the organization.
	Plan *string `json:"plan,omitempty"`
	// The start date of the current monthly period.
	MonthlyPeriodStart *string `json:"monthly_period_start,omitempty"`
	// The end date of the current monthly period.
	MonthlyPeriodEnd *string `json:"monthly_period_end,omitempty"`
	// The number of rule executions used this month.
	MonthlyExecutionsUsage *float64 `json:"monthly_executions_usage,omitempty"`
	// The total number of rule executions allowed this month.
	MonthlyExecutionsLimit *float64 `json:"monthly_executions_limit,omitempty"`
	// The number of rule executions remaining this month.
	MonthlyExecutionsRemaining *float64 `json:"monthly_executions_remaining,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UsageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsageResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsageResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
