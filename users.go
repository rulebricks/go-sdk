// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type CreateGroupRequest struct {
	// Unique name of the user group.
	Name string `json:"name"`
	// Description of the user group.
	Description *string `json:"description,omitempty"`
}

type InviteRequest struct {
	// Email of the user to invite.
	Email string `json:"email"`
	// Role to assign to the user.
	Role *InviteRequestRole `json:"role,omitempty"`
	// List of access group names or IDs to assign to the user.
	AccessGroups []string `json:"accessGroups,omitempty"`
}

type CreateGroupResponse struct {
	// Unique identifier of the user group.
	Id *string `json:"id,omitempty"`
	// Name of the user group.
	Name *string `json:"name,omitempty"`
	// Description of the user group.
	Description *string `json:"description,omitempty"`
	// List of member emails in the user group.
	Members []string `json:"members,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateGroupResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGroupResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGroupResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGroupResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Role to assign to the user.
type InviteRequestRole string

const (
	InviteRequestRoleEditor    InviteRequestRole = "editor"
	InviteRequestRoleDeveloper InviteRequestRole = "developer"
)

func NewInviteRequestRoleFromString(s string) (InviteRequestRole, error) {
	switch s {
	case "editor":
		return InviteRequestRoleEditor, nil
	case "developer":
		return InviteRequestRoleDeveloper, nil
	}
	var t InviteRequestRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InviteRequestRole) Ptr() *InviteRequestRole {
	return &i
}

type InviteResponse struct {
	Message *string `json:"message,omitempty"`

	_rawJSON json.RawMessage
}

func (i *InviteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InviteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InviteResponse(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InviteResponse) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type ListGroupsResponseItem struct {
	// Unique identifier of the user group.
	Id *string `json:"id,omitempty"`
	// Name of the user group.
	Name *string `json:"name,omitempty"`
	// Description of the user group.
	Description *string `json:"description,omitempty"`
	// List of member emails in the user group.
	Members []string `json:"members,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListGroupsResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListGroupsResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListGroupsResponseItem(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListGroupsResponseItem) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
