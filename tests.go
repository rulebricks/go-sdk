// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
	time "time"
)

type CreateTestRequest struct {
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
}

type CreateTestResponse struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateTestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTestResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTestResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteTestResponse struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeleteTestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteTestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteTestResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteTestResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListTestsResponseItem struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListTestsResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTestsResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTestsResponseItem(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTestsResponseItem) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
