// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
	time "time"
)

type CreateFlowTestRequest struct {
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
}

type CreateRuleTestRequest struct {
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
}

type CreateFlowTestResponse struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateFlowTestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFlowTestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFlowTestResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFlowTestResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateRuleTestResponse struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateRuleTestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateRuleTestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateRuleTestResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateRuleTestResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteFlowTestResponse struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeleteFlowTestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteFlowTestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteFlowTestResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteFlowTestResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteRuleTestResponse struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeleteRuleTestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteRuleTestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteRuleTestResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteRuleTestResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListFlowTestsResponseItem struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListFlowTestsResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFlowTestsResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFlowTestsResponseItem(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFlowTestsResponseItem) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRuleTestsResponseItem struct {
	// Unique identifier for the test.
	Id string `json:"id"`
	// The name of the test.
	Name string `json:"name"`
	// The request object for the test.
	Request map[string]interface{} `json:"request,omitempty"`
	// The expected response object for the test.
	Response map[string]interface{} `json:"response,omitempty"`
	// Indicates whether the test is critical.
	Critical bool `json:"critical"`
	// Indicates if the test resulted in an error.
	Error bool `json:"error"`
	// Indicates if the test was successful.
	Success bool `json:"success"`
	// The state of the test after execution.
	TestState map[string]interface{} `json:"testState,omitempty"`
	// The timestamp when the test was last executed.
	LastExecuted *time.Time `json:"lastExecuted,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListRuleTestsResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRuleTestsResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRuleTestsResponseItem(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRuleTestsResponseItem) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
